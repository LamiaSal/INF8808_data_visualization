'''
    Contains some functions to preprocess the data used in the visualisation.
'''
from cmath import nan
import pandas as pd
import numpy as np


# AXE 2
def clean_and_join_dataframes(dataframe_1, dataframe_2):
    '''
        Args:
            dataframe_1: dataframe of  Carboon Pricing Initiatives dataset
            dataframe_1: dataframe of  PIB/capita and CO2 emission dataset
        Returns:
            dataframe_3: The dataframe result of the 2 dataframes joined on Country
    '''

    #  Update the titles
    # Take only the countries data and the countries that implemented the measures
    dataframe_1 = dataframe_1[dataframe_1["Type of juridiction covered"]=="National"]
    dataframe_1 = dataframe_1[dataframe_1["Status"]=="Implemented"]
    
    # cleaning
    dataframe_1 = dataframe_1[['Type','Jurisdiction covered']]
    dataframe_1['Jurisdiction covered'] = dataframe_1['Jurisdiction covered'].astype(str)
    dataframe_1 = dataframe_1.dropna()
    dataframe_1 = dataframe_1.rename(columns = {'Jurisdiction covered': 'Country Name'})

    # cleaning
    dataframe_2['Country Name'] = dataframe_2['Country Name'].astype(str)#
    dataframe_2 = dataframe_2.dropna()
    dataframe_2 = dataframe_2.applymap(lambda x: str(x).replace(',','.'))
    dataframe_2["GDP per capita (current US$)"] = dataframe_2["GDP per capita (current US$)"].astype(float)
    dataframe_2["CO2 emissions (metric tons per capita)"] = dataframe_2["CO2 emissions (metric tons per capita)"].astype(float)

    # joining dataframes on Country name
    dataframe_3 = dataframe_2.join(dataframe_1.set_index('Country Name'), on='Country Name')
    
    # renmae Type column data
    dataframe_3['Type'] = dataframe_3['Type'].map({
        "Undecided" : "Aucune taxe",
        np.nan : "Aucune taxe",
        'ETS':'ETS',
        'Carbon tax':'Taxe Carbone',})
    
    # merging lines of countries implemting both ETS and Carbon Tax
    dataframe_3 = dataframe_3.sort_values('Type').groupby(['Country Name', 'Country Code','CO2 emissions (metric tons per capita)','GDP per capita (current US$)'])['Type'].apply(' & '.join).reset_index()

    # translating column names to french
    dataframe_3 = dataframe_3.rename(columns = {'Country Name': 'Pays','Country Code':'Code du Pays','CO2 emissions (metric tons per capita)':'Émission de CO2 (tonne par habitant)', 'GDP per capita (current US$)':'PIB/habitant (US$)'})

    return dataframe_3


def preprocess_implemented_and_scheduled(dataframe):
    '''
        Args:
            dataframe: dataframe of  Carboon Pricing Initiatives (Data_Overall.csv)
        Returns:
            dataframe: dataframe with the countries that either implementer or scheduled one or two of the measures
    '''
    dataframe = dataframe[(dataframe['Status'].isin(['Implemented', 'Scheduled'])) & (dataframe['Type of juridiction covered'] == 'National')]
    dataframe = dataframe[['Status', 'Jurisdiction covered']]
    dataframe = dataframe.drop_duplicates()
    dataframe.columns = ['Status','Country']
    
    return dataframe

### AXE 3
def get_countries(my_df):
    '''
        Gets only 3 countries in the dataset
    '''
    # TODO : Modify the dataframe, removing the line content and replacing
    # it by line count and percent per player per act

    cols = my_df["Data_Overall"]["Name of the initiative"]
    countries = ["Canada", "Switzerland", "Newfoundland and Labrador"]
    indexes = list()
    for index,country in enumerate(cols):
        for c in countries:
            if type(country)==str:
                if c in country:
                    indexes.append(index)
                    break
    my_df = my_df["Data_Overall"].iloc[indexes]

    return my_df


def get_saved_CO2(my_df):
    '''
        Retrieves saved CO2 for different measures for a set of countries
    '''
    countries = ["Canada", "Switzerland", "Newfoundland and Labrador"]
    for index, c in enumerate(my_df["Name of the initiative"]):
        for co in countries:
            if co in c:
                my_df["Name of the initiative"][my_df.index[index]] = co
                break
    my_df = my_df.rename(columns={"Name of the initiative":"Country"})
    my_df = my_df[['Country', 'Type', 'GHG emissions covered [MtCO2e]', 'Year of implementation']]     
    return my_df

def get_revenue(df):
    # revenue generated by different measures
    df = df["Data_Revenue"]
    df = df.rename(columns={"Name of the initiative":"Country"})
    del df["Instrument Type"]
    del df["Jurisdiction Covered"]
    ndf = df[df['Country'].str.contains('Switzerland')]
    for year in ndf.keys()[1:-1]:
        if int(year[-4:])< 2005:
            del ndf[year]
        else:
            ndf = ndf.rename(columns={year:int(year[-4:])})
    ndf = ndf.T
    ndf['Year'] = ndf.index
    ndf = ndf.rename(columns={79:"Carbon tax", 80:"ETS"})
    ndf = ndf.drop(["Unnamed: 33", "Country"])
    return ndf

def get_world_emissions_per_year(df:pd.DataFrame, df2:pd.DataFrame):
    # prepare data from global emissions and coverage in percentage
    ndf = pd.DataFrame()
    covered_df = pd.DataFrame()
    df2 = df2['Data_Emission']
    df2 = df2.rename(columns={"Unnamed: 0":"Country"})
    ets_per_year = df2[df2['Country'].str.contains('ETS')]
    ct_per_year = pd.concat((df2[df2['Country'].str.contains('carbon tax')], df2[df2['Country'].str.contains('CaT')]), ignore_index=True)
    for y in range(1990, 2022):
        covered = df2[str(y)]
        covered_ETS = ets_per_year[str(y)]
        covered_ct = ct_per_year[str(y)]
        
        s = 0
        s_ETS = 0
        s_ct = 0
        for v in covered:
            if v[:-1] != '':
                s += float(v[:-1])
        for v in covered_ETS:
            if v[:-1] != '':
                s_ETS += float(v[:-1])
        for v in covered_ct:
            if v[:-1] != '':
                
                s_ct += float(v[:-1])
        tmp = {"Year":str(y), "Total": s, "ETS":s_ETS, "CT":s_ct}

        

        covered_df = covered_df.append(tmp, ignore_index=True)
    # we have the percentages in covered_df
    for year in df["Year"].unique():
        if year > 1990:
            cur_em = df.loc[df['Year'] == year]["Annual CO2 emissions"].sum()
            w_ETS = cur_em/(1-covered_df[covered_df["Year"]==str(year)]["ETS"].tolist()[0]/100)
            w_ct = cur_em/(1-covered_df[covered_df["Year"]==str(year)]["CT"].tolist()[0]/100)
            w_anything = cur_em/(1-covered_df[covered_df["Year"]==str(year)]["Total"].tolist()[0]/100)
            res = {"Year":year, "Émissions actuelles":cur_em, "Avec taxe carbone": w_ETS, "Avec ETS": w_ct, "Sans aucune taxe":w_anything}
            ndf = ndf.append(res, ignore_index=True)
    return ndf

def prep_ax3_data():
    '''
        Imports the .xlsx file and does some preprocessing.

        Returns:
            A pandas dataframe containing the preprocessed data.
    '''
    dataframe = pd.read_excel('https://github.com/LamiaSal/data_project_INF8808/raw/main/assets/CPI_Data_DashboardExtract.xlsx', ['Data_Overall'])
    processed_df = get_countries(dataframe)
    processed_df = get_saved_CO2(processed_df)

    return processed_df

def prep_revenue_data():
    '''
        Imports the .xlsx file and does some preprocessing.

        Returns:
            A pandas dataframe containing the preprocessed data.
    '''
    dataframe = pd.read_excel('https://github.com/LamiaSal/data_project_INF8808/raw/main/assets/CPI_Data_DashboardExtract.xlsx', ['Data_Revenue'])
    processed_df = get_revenue(dataframe)
    return processed_df


def prep_emissions_data():
    '''
        Imports the .csv file and does some preprocessing.

        Returns:
            A pandas dataframe containing the preprocessed data.
    '''
    dataframe2 = pd.read_excel('https://github.com/LamiaSal/data_project_INF8808/raw/main/assets/CPI_Data_DashboardExtract.xlsx', ['Data_Emission'], skiprows=[0,1])
    dataframe = pd.read_csv("https://raw.githubusercontent.com/LamiaSal/data_project_INF8808/main/assets/annual-co2-emissions-per-country.csv")
    return get_world_emissions_per_year(dataframe, dataframe2)